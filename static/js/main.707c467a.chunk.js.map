{"version":3,"sources":["table.js","App.js","serviceWorker.js","index.js"],"names":["Table","columns","this","props","rows","theader","react_default","a","createElement","map","column","href","concat","name","body","value","key","color","tasks","includes","className","width","React","Component","App","state","board","selectedOption","localStorage","getItem","isLoad","handleChange","_this","setState","setItem","_this2","fetch","then","res","json","data","_this$state","mentor","opt","reduce","result","push","label","github","react_select_esm","onChange","options","src_table","students","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUA4CeA,mLApCX,IAAMC,EAAUC,KAAKC,MAAMF,QACrBG,EAAOF,KAAKC,MAAMC,KAElBC,EACJC,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACCC,IAAIR,EAAS,SAAAS,GAAM,OAAIJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGG,KAAI,sBAAAC,OAAwBF,EAAOG,OAASH,EAAOG,WAKlFC,EAAOL,IAAIL,EAAM,SAACW,EAAOC,GAC7B,OACEV,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGG,KAAMI,GAAQC,IACpBP,IAAIR,EAAS,SAAAS,GACZ,IAAIO,EAAQP,EAAOQ,MAAMC,SAASH,GAAO,QAAU,MAEnD,MADY,gBAARA,IAAuBC,EAAQ,QAC3BX,EAAAC,EAAAC,cAAA,MAAIY,UAAWH,SAM/B,OACEX,EAAAC,EAAAC,cAAA,SAAOY,UAAU,mCAAmCC,MAAM,QACvDhB,EACDC,EAAAC,EAAAC,cAAA,aACGM,WAhCSQ,IAAMC,4BCwDXC,6MAtDbC,MAAQ,CACNP,MAAO,GACPQ,MAAO,GACPC,eAAgBC,aAAaC,QAAQ,UACrCC,QAAQ,KASVC,aAAe,SAACJ,GACdK,EAAKC,SAAS,CAAEN,mBAChBC,aAAaM,QAAQ,SAAUP,EAAeZ,2FAR5B,IAAAoB,EAAAjC,KAClBkC,MAAM,eACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIL,EAAKF,SAAS,CAAEf,MAAOsB,EAAKtB,MAAOQ,MAAOc,EAAKd,MAAOI,QAAQ,uCAQvE,IAAAW,EAC0CvC,KAAKuB,MAA9CP,EADDuB,EACCvB,MAAOQ,EADRe,EACQf,MAAOC,EADfc,EACed,eAAgBG,EAD/BW,EAC+BX,OAChCY,EAASd,aAAaC,QAAQ,UAC9Bc,EAAMC,IAAOlB,EAAO,SAACmB,EAAQ9B,EAAOC,GAExC,OADA6B,EAAOC,KAAK,CAAE/B,MAAOC,EAAK+B,MAAK,GAAAnC,OAAKI,EAAL,cAAAJ,OAAqBG,EAAMiC,OAA3B,OACxBH,GACN,IAEH,OAAIf,GAAUY,EAEVpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACElC,MAAOY,EACPuB,SAAUhD,KAAK6B,aACfoB,QAASR,IAEXrC,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,mBAAH,KAAmBkC,GACnBpC,EAAAC,EAAAC,cAAC4C,EAAD,CACEnD,QAASyB,EAAMgB,GAAQW,SACvBjD,KAAMc,KAMRZ,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACElC,MAAOY,EACPuB,SAAUhD,KAAK6B,aACfoB,QAASR,WA/CHrB,IAAMC,WCMJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.707c467a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './table.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport map from 'lodash.map';\r\n\r\nclass Table extends React.Component {\r\n\r\n  render() {\r\n    const columns = this.props.columns;\r\n    const rows = this.props.rows;\r\n\r\n    const theader = (\r\n      <thead>\r\n        <tr>\r\n          <th>Task name</th>\r\n          {map(columns, column => <th><a href={`https://github.com/${column.name}`}>{column.name}</a></th>)}\r\n        </tr>\r\n      </thead>\r\n    );\r\n\r\n    const body = map(rows, (value, key) => {\r\n      return (\r\n        <tr>\r\n          <td><a href={value}>{key}</a></td>\r\n          {map(columns, column => {\r\n            let color = column.tasks.includes(key) ? 'green' : 'red';\r\n            if (key === 'Course work') color = 'gray';\r\n            return (<td className={color}></td>);\r\n          })}\r\n        </tr>\r\n      ); \r\n    });\r\n\r\n    return (\r\n      <table className=\"table table-bordered table-hover\" width=\"100%\">\r\n        {theader}\r\n        <tbody>\r\n          {body}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table \r\n","import React from 'react';\nimport './App.css';\nimport Select from 'react-select';\nimport Table from './table';\nimport reduce from 'lodash.reduce';\n\nclass App extends React.Component {\n  state = {\n    tasks: {},\n    board: {},\n    selectedOption: localStorage.getItem('mentor'),\n    isLoad: false\n  }\n\n  componentDidMount() {\n    fetch('./data.json')\n      .then(res => res.json())\n      .then(data => this.setState({ tasks: data.tasks, board: data.board, isLoad: true }));\n  }\n\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    localStorage.setItem('mentor', selectedOption.value);\n  }\n\n  render() {\n    const { tasks, board, selectedOption, isLoad } = this.state;\n    const mentor = localStorage.getItem('mentor');\n    const opt = reduce(board, (result, value, key) => {\n      result.push({ value: key, label: `${key} (github: ${value.github})` });\n      return result;\n    }, []);\n\n    if (isLoad && mentor) {\n      return (\n        <div>\n          <Select\n            value={selectedOption}\n            onChange={this.handleChange}\n            options={opt}\n          />\n          <p><b>Mentor</b>: {mentor}</p>\n          <Table\n            columns={board[mentor].students}\n            rows={tasks}\n          />\n        </div>\n      );\n    } else {\n      return (\n          <Select\n            value={selectedOption}\n            onChange={this.handleChange}\n            options={opt}\n            \n          />\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}